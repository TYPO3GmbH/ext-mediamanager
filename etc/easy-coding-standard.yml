services:
    # INLINED FROM vendor/symplify/easy-coding-standard/config/set/php_codesniffer/php-codesniffer-psr2.yaml
    PHP_CodeSniffer\Standards\PSR2\Sniffs\Namespaces\NamespaceDeclarationSniff:
    PHP_CodeSniffer\Standards\PSR2\Sniffs\Namespaces\UseDeclarationSniff:
    PHP_CodeSniffer\Standards\PSR2\Sniffs\Classes\ClassDeclarationSniff:
    PHP_CodeSniffer\Standards\PSR2\Sniffs\Classes\PropertyDeclarationSniff:
    PHP_CodeSniffer\Standards\PSR2\Sniffs\Files\EndFileNewlineSniff:
    PHP_CodeSniffer\Standards\PSR2\Sniffs\Files\ClosingTagSniff:
    PHP_CodeSniffer\Standards\PSR2\Sniffs\ControlStructures\ControlStructureSpacingSniff:
    PHP_CodeSniffer\Standards\PSR2\Sniffs\ControlStructures\SwitchDeclarationSniff:
    PHP_CodeSniffer\Standards\PSR2\Sniffs\ControlStructures\ElseIfDeclarationSniff:
    PHP_CodeSniffer\Standards\PSR2\Sniffs\Methods\FunctionCallSignatureSniff:
    PHP_CodeSniffer\Standards\PSR2\Sniffs\Methods\MethodDeclarationSniff:
    PHP_CodeSniffer\Standards\PSR2\Sniffs\Methods\FunctionClosingBraceSniff:
    PHP_CodeSniffer\Standards\Generic\Sniffs\Files\ByteOrderMarkSniff:
    PHP_CodeSniffer\Standards\Squiz\Sniffs\Classes\ValidClassNameSniff:
    PHP_CodeSniffer\Standards\Generic\Sniffs\NamingConventions\UpperCaseConstantNameSniff:
    PHP_CodeSniffer\Standards\Generic\Sniffs\Files\LineEndingsSniff:
        eolChar: \n
    PHP_CodeSniffer\Standards\Squiz\Sniffs\WhiteSpace\SuperfluousWhitespaceSniff:
        ignoreBlankLines: true
    PHP_CodeSniffer\Standards\Generic\Sniffs\Formatting\DisallowMultipleStatementsSniff:
    PHP_CodeSniffer\Standards\Generic\Sniffs\WhiteSpace\ScopeIndentSniff:
        ignoreIndentationTokens:
            - T_COMMENT
            - T_DOC_COMMENT_OPEN_TAG
    PHP_CodeSniffer\Standards\Generic\Sniffs\WhiteSpace\DisallowTabIndentSniff:
    PHP_CodeSniffer\Standards\Generic\Sniffs\PHP\LowerCaseKeywordSniff:
    PHP_CodeSniffer\Standards\Generic\Sniffs\PHP\LowerCaseConstantSniff:
    PHP_CodeSniffer\Standards\Squiz\Sniffs\Scope\MethodScopeSniff:
    PHP_CodeSniffer\Standards\Squiz\Sniffs\WhiteSpace\ScopeKeywordSpacingSniff:
    PHP_CodeSniffer\Standards\Squiz\Sniffs\Functions\FunctionDeclarationSniff:
    PHP_CodeSniffer\Standards\Squiz\Sniffs\Functions\LowercaseFunctionKeywordsSniff:
    PHP_CodeSniffer\Standards\Squiz\Sniffs\Functions\FunctionDeclarationArgumentSpacingSniff:
        equalsSpacing: 1
    PHP_CodeSniffer\Standards\PEAR\Sniffs\Functions\ValidDefaultValueSniff:
    PHP_CodeSniffer\Standards\Squiz\Sniffs\Functions\MultiLineFunctionDeclarationSniff:
    PHP_CodeSniffer\Standards\Generic\Sniffs\Functions\FunctionCallArgumentSpacingSniff:
    PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\ControlSignatureSniff:
    PHP_CodeSniffer\Standards\Squiz\Sniffs\WhiteSpace\ControlStructureSpacingSniff:
    PHP_CodeSniffer\Standards\Squiz\Sniffs\WhiteSpace\ScopeClosingBraceSniff:
    PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\ForEachLoopDeclarationSniff:
    PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\ForLoopDeclarationSniff:
    PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\LowercaseDeclarationSniff:
    PHP_CodeSniffer\Standards\Generic\Sniffs\ControlStructures\InlineControlStructureSniff:


    # INLINED FROM vendor/symplify/easy-coding-standard/config/set/php_cs_fixer/php-cs-fixer-psr2
    # PSR1
    PhpCsFixer\Fixer\Basic\EncodingFixer: ~
    PhpCsFixer\Fixer\PhpTag\FullOpeningTagFixer: ~

    PhpCsFixer\Fixer\NamespaceNotation\BlankLineAfterNamespaceFixer: ~
    PhpCsFixer\Fixer\Basic\BracesFixer: ~
    PhpCsFixer\Fixer\ControlStructure\ElseifFixer: ~
    PhpCsFixer\Fixer\FunctionNotation\FunctionDeclarationFixer: ~
    PhpCsFixer\Fixer\Whitespace\IndentationTypeFixer: ~
    PhpCsFixer\Fixer\Whitespace\LineEndingFixer: ~
    PhpCsFixer\Fixer\Casing\LowercaseConstantsFixer: ~
    PhpCsFixer\Fixer\Casing\LowercaseKeywordsFixer: ~
    PhpCsFixer\Fixer\FunctionNotation\MethodArgumentSpaceFixer:
        ensure_fully_multiline: true
    PhpCsFixer\Fixer\ControlStructure\NoBreakCommentFixer: ~
    PhpCsFixer\Fixer\PhpTag\NoClosingTagFixer: ~
    PhpCsFixer\Fixer\FunctionNotation\NoSpacesAfterFunctionNameFixer: ~
    PhpCsFixer\Fixer\Whitespace\NoSpacesInsideParenthesisFixer: ~
    PhpCsFixer\Fixer\Whitespace\NoTrailingWhitespaceFixer: ~
    PhpCsFixer\Fixer\Comment\NoTrailingWhitespaceInCommentFixer: ~
    PhpCsFixer\Fixer\Whitespace\SingleBlankLineAtEofFixer: ~
    PhpCsFixer\Fixer\ClassNotation\SingleClassElementPerStatementFixer:
        elements:
            - 'property'
    PhpCsFixer\Fixer\Import\SingleImportPerStatementFixer: ~
    PhpCsFixer\Fixer\Import\SingleLineAfterImportsFixer: ~
    PhpCsFixer\Fixer\ControlStructure\SwitchCaseSemicolonToColonFixer: ~
    PhpCsFixer\Fixer\ControlStructure\SwitchCaseSpaceFixer: ~
    PhpCsFixer\Fixer\ClassNotation\VisibilityRequiredFixer: ~


    # INLINED FROM vendor/symplify/easy-coding-standard/config/set/clean-code.yaml
    # function ($var) use ($unused) { return $var; }    →   function ($var) { return $var; }
    SlevomatCodingStandard\Sniffs\Functions\UnusedInheritedVariablePassedToClosureSniff: ~

    # echo "hi";;   →   echo "hi";
    SlevomatCodingStandard\Sniffs\PHP\UselessSemicolonSniff: ~

    # ((new Class))->call()   →     (new Class)->call()
    SlevomatCodingStandard\Sniffs\PHP\UselessParenthesesSniff: ~

    # use short array []
    PhpCsFixer\Fixer\ArrayNotation\ArraySyntaxFixer:
        syntax: short

    # detect dead code
    SlevomatCodingStandard\Sniffs\Classes\UnusedPrivateElementsSniff:

    # drop dead use namespaces
    PhpCsFixer\Fixer\Import\NoUnusedImportsFixer:

    # and sort them A → Z
    PhpCsFixer\Fixer\Import\OrderedImportsFixer:

    # $value;;
    PhpCsFixer\Fixer\Semicolon\NoEmptyStatementFixer:

    # final class { ... protected ... }
    PhpCsFixer\Fixer\ClassNotation\ProtectedToPrivateFixer:

    # continue (2);
    PhpCsFixer\Fixer\ControlStructure\NoUnneededControlParenthesesFixer:

    # { echo 'hi'; }
    PhpCsFixer\Fixer\ControlStructure\NoUnneededCurlyBracesFixer:

    # $var = $foo : $foo ? $bar → $var = $foo ?: $bar
    SlevomatCodingStandard\Sniffs\ControlStructures\RequireShortTernaryOperatorSniff:

    # $var = $var + foo → $var += $foo
    SlevomatCodingStandard\Sniffs\Operators\RequireCombinedAssignmentOperatorSniff:


    # ADDITIONAL RULES
    PhpCsFixer\Fixer\Operator\ConcatSpaceFixer:
        spacing: one
    PhpCsFixer\Fixer\Operator\NewWithBracesFixer: ~

    PhpCsFixer\Fixer\Phpdoc\PhpdocAlignFixer:
        tags: [ param ]

    PhpCsFixer\Fixer\Operator\UnaryOperatorSpacesFixer: ~
    PhpCsFixer\Fixer\CastNotation\CastSpacesFixer: ~
    PhpCsFixer\Fixer\LanguageConstruct\DeclareEqualNormalizeFixer: ~
    PhpCsFixer\Fixer\FunctionNotation\FunctionTypehintSpaceFixer: ~
    PhpCsFixer\Fixer\Comment\HashToSlashCommentFixer: ~
    PhpCsFixer\Fixer\ControlStructure\IncludeFixer: ~
    PhpCsFixer\Fixer\CastNotation\LowercaseCastFixer: ~
    PhpCsFixer\Fixer\ClassNotation\MethodSeparationFixer: ~
    PhpCsFixer\Fixer\Casing\NativeFunctionCasingFixer: ~
    PhpCsFixer\Fixer\ClassNotation\NoBlankLinesAfterClassOpeningFixer: ~
    PhpCsFixer\Fixer\Phpdoc\NoBlankLinesAfterPhpdocFixer: ~
    PhpCsFixer\Fixer\Comment\NoEmptyCommentFixer: ~
    PhpCsFixer\Fixer\Phpdoc\NoEmptyPhpdocFixer: ~
    PhpCsFixer\Fixer\Whitespace\NoExtraConsecutiveBlankLinesFixer:
        - curly_brace_block
        - extra
        - parenthesis_brace_block
        - square_brace_block
        - throw
        - use
    PhpCsFixer\Fixer\NamespaceNotation\NoLeadingNamespaceWhitespaceFixer: ~
    PhpCsFixer\Fixer\ArrayNotation\NoMultilineWhitespaceAroundDoubleArrowFixer: ~
    PhpCsFixer\Fixer\CastNotation\NoShortBoolCastFixer: ~
    PhpCsFixer\Fixer\Semicolon\NoSinglelineWhitespaceBeforeSemicolonsFixer: ~
    PhpCsFixer\Fixer\Whitespace\NoSpacesAroundOffsetFixer: ~
    PhpCsFixer\Fixer\ControlStructure\NoTrailingCommaInListCallFixer: ~
    PhpCsFixer\Fixer\ArrayNotation\NoTrailingCommaInSinglelineArrayFixer: ~
    PhpCsFixer\Fixer\ArrayNotation\TrailingCommaInMultilineArrayFixer: ~
    PhpCsFixer\Fixer\ArrayNotation\NoWhitespaceBeforeCommaInArrayFixer: ~
    PhpCsFixer\Fixer\Whitespace\NoWhitespaceInBlankLineFixer: ~
    PhpCsFixer\Fixer\ArrayNotation\NormalizeIndexBraceFixer: ~
    PhpCsFixer\Fixer\Operator\ObjectOperatorWithoutWhitespaceFixer: ~
    PhpCsFixer\Fixer\Phpdoc\PhpdocAnnotationWithoutDotFixer: ~
    PhpCsFixer\Fixer\Phpdoc\PhpdocIndentFixer: ~
    PhpCsFixer\Fixer\Phpdoc\PhpdocInlineTagFixer: ~
    PhpCsFixer\Fixer\Phpdoc\PhpdocNoAccessFixer: ~
    PhpCsFixer\Fixer\Phpdoc\PhpdocNoEmptyReturnFixer: ~
    PhpCsFixer\Fixer\Phpdoc\PhpdocNoPackageFixer: ~
    PhpCsFixer\Fixer\Phpdoc\PhpdocNoUselessInheritdocFixer: ~
    PhpCsFixer\Fixer\Phpdoc\PhpdocScalarFixer: ~
    PhpCsFixer\Fixer\Phpdoc\PhpdocSingleLineVarSpacingFixer: ~
    PhpCsFixer\Fixer\Phpdoc\PhpdocToCommentFixer: ~
    PhpCsFixer\Fixer\Phpdoc\PhpdocTrimFixer: ~
    PhpCsFixer\Fixer\Phpdoc\PhpdocTypesFixer: ~
    PhpCsFixer\Fixer\Phpdoc\PhpdocVarWithoutNameFixer: ~
    PhpCsFixer\Fixer\Operator\PreIncrementFixer: ~

    PhpCsFixer\Fixer\ClassNotation\SelfAccessorFixer: ~
    PhpCsFixer\Fixer\CastNotation\ShortScalarCastFixer: ~
    PhpCsFixer\Fixer\StringNotation\SingleQuoteFixer: ~
    PhpCsFixer\Fixer\Semicolon\SpaceAfterSemicolonFixer: ~
    PhpCsFixer\Fixer\Operator\StandardizeNotEqualsFixer: ~
    PhpCsFixer\Fixer\Operator\TernaryOperatorSpacesFixer: ~
    PhpCsFixer\Fixer\ArrayNotation\TrimArraySpacesFixer: ~
    PhpCsFixer\Fixer\ArrayNotation\WhitespaceAfterCommaInArrayFixer: ~
    PhpCsFixer\Fixer\ClassNotation\ClassDefinitionFixer:
        singleLine: true
    PhpCsFixer\Fixer\Casing\MagicConstantCasingFixer: ~
    PhpCsFixer\Fixer\Alias\NoMixedEchoPrintFixer:
        use: echo
    PhpCsFixer\Fixer\PhpUnit\PhpUnitFqcnAnnotationFixer: ~
    PhpCsFixer\Fixer\Phpdoc\PhpdocNoAliasTagFixer: ~
    PhpCsFixer\Fixer\NamespaceNotation\SingleBlankLineBeforeNamespaceFixer: ~

    # new since PHP-CS-Fixer 2.6
    PhpCsFixer\Fixer\ClassNotation\NoUnneededFinalMethodFixer: ~
    PhpCsFixer\Fixer\Semicolon\SemicolonAfterInstructionFixer: ~
    PhpCsFixer\Fixer\ControlStructure\YodaStyleFixer: ~


    PhpCsFixer\Fixer\Alias\RandomApiMigrationFixer:
        mt_rand: random_int
        rand: random_int

    # declare(strict_types=1)
    PhpCsFixer\Fixer\Strict\DeclareStrictTypesFixer: ~

    # Typehints
    PhpCsFixer\Fixer\FunctionNotation\ReturnTypeDeclarationFixer:
        space_before: none

    # Throwable
    SlevomatCodingStandard\Sniffs\Exceptions\ReferenceThrowableOnlySniff: ~
    SlevomatCodingStandard\Sniffs\Commenting\RequireOneLinePropertyDocCommentSniff: ~

    SlevomatCodingStandard\Sniffs\Commenting\DocCommentSpacingSniff:
        linesCountBeforeFirstContent: 0
        linesCountBetweenDifferentAnnotationsTypes: 1

    PHP_CodeSniffer\Standards\Squiz\Sniffs\WhiteSpace\MemberVarSpacingSniff:
        spacing: 1
        spacingBeforeFirst: 0

    PhpCsFixer\Fixer\Comment\HeaderCommentFixer:
        header: |
            This file is part of the TYPO3 CMS project.

            It is free software; you can redistribute it and/or modify it under
            the terms of the GNU General Public License, either version 2
            of the License, or any later version.

            For the full copyright and license information, please read the
            LICENSE.txt file that was distributed with this source code.

            The TYPO3 project - inspiring people to share!
        location: after_declare_strict

    # Leading slash before internal functions
    PhpCsFixer\Fixer\FunctionNotation\NativeFunctionInvocationFixer: ~


parameters:
    skip:
        # INLINED FROM vendor/symplify/easy-coding-standard/config/set/php_codesniffer/php-codesniffer-psr2.yaml
        # Only some rules from ControlStructureSpacingSniff are part of PSR-2, skip the rest:
        PHP_CodeSniffer\Standards\Squiz\Sniffs\WhiteSpace\ControlStructureSpacingSniff.SpacingAfterOpenBrace: ~
        PHP_CodeSniffer\Standards\Squiz\Sniffs\WhiteSpace\ControlStructureSpacingSniff.SpaceBeforeCloseBrace: ~
        PHP_CodeSniffer\Standards\Squiz\Sniffs\WhiteSpace\ControlStructureSpacingSniff.LineAfterClose: ~
        PHP_CodeSniffer\Standards\Squiz\Sniffs\WhiteSpace\ControlStructureSpacingSniff.NoLineAfterClose: ~
        # PSR-2 does not enforce line alignment (https://www.php-fig.org/psr/psr-2/#7-conclusion)
        PHP_CodeSniffer\Standards\PSR2\Sniffs\Methods\FunctionCallSignatureSniff.OpeningIndent: ~

